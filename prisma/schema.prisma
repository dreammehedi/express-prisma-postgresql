generator client {
  provider      = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StorageType {
  locally
  cloudinary
}

// global setting
model GlobalSettings {
id                         String    @id @default(uuid())
  siteName              String   @default("Website Name")
  siteUrl               String   @default("https://your-domain.com")
  timezone              String   @default("Asia/Dhaka")
  dateFormat            String   @default("YYYY-MM-DD") 
  currency              String   @default("USD") 
  sessionTimeout        Int      @default(30) 
  passwordMinLength     Int      @default(8)
  requireTwoFactorAuth  Boolean  @default(false)
  allowUserRegistration Boolean  @default(true)
  enableAutoBackups     Boolean  @default(false)
  backupFrequency       String   @default("weekly")
  backupRetentionDays   Int      @default(30)
  enableCaching         Boolean  @default(true)
  enableCompression     Boolean  @default(true)
  enableCDN             Boolean  @default(false)
  storageUse            String   @default("locally")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// database backup
model DatabaseBackup {
id                         String    @id @default(uuid())
  fileName   String
  filePath   String
  fileSize   Int 
  compressed Boolean  @default(true)
  createdAt  DateTime @default(now())
}


// users
model User {
id                         String    @id @default(uuid())
  username                   String
  email                      String    @unique
  password                   String
  avatar                     String?
  avatarPublicId             String?
  phone                      String?
  bio                        String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  role                       String    @default("user")
  isAdmin                    Boolean   @default(false)
  status                     Status    @default(pending)
  resetCode                  String?
  resetCodeExpiration        DateTime? @default(now())
  isEmailNotificationEnabled Boolean   @default(true)
  isOrderNotificationEnabled Boolean   @default(true)
  isStockAlertEnabled        Boolean   @default(true)
  isSystemAlertEnabled       Boolean   @default(true)
  isTwoFactorEnabled         Boolean   @default(false)
  twoFactorTempToken         String?
  twoFactorTempExp           DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions  Session[]
}

// user status
enum Status {
  active
  inactive
  pending
}

// user login devices session
model Session {
  id                         String    @id @default(uuid())
  userId     String  
  token      String
  deviceInfo String 
  isActive   Boolean   @default(true)
  lastUsedAt DateTime?
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

// dynamic page
model DynamicPage {
  id                         String    @id @default(uuid())
  name        String
  slug        String @unique
  description String
  content     String

  // SEO-specific fields
  metaTitle          String? 
  metaDescription    String? 
  metaKeywords       String[]
  canonicalUrl       String? 
  ogTitle            String? 
  ogDescription      String?
  ogImage            String? 
  twitterTitle       String? 
  twitterDescription String?
  twitterImage       String? 

  status    String   @default("active")
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// email configuration
model EmailConfiguration {
id                         String    @id @default(uuid())
  emailMailer     String
  emailHost       String
  emailPort       Int
  emailUserName   String
  emailPassword   String
  emailEncryption String
  emailFromName   String
  emailAddress    String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}


// contact information
model ContactInformation {
 id                         String    @id @default(uuid())
  email                 String
  email2                String?
  phone                 String
  phone2                String?
  address               String
  address2              String?
  businessHoursWeekdays String
  businessHoursWeekends String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}


// tracking ids
model TrackingIds {
  id                         String    @id @default(uuid())
  gtmId     String
  gaId      String
  fbId      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// social network
model SocialNetwork {
id                         String    @id @default(uuid())
  facebookLink   String?
  twitterLink    String?
  linkedinLink   String?
  instagramLink  String?
  youtubeLink    String?
  dribbleLink    String?
  whatsappNumber String?
  telegramLink   String?
  snapchatLink   String?
  tiktokLink     String?
  threadsLink    String?
  pinterestLink  String?
  redditLink     String?
  githubLink     String?
  websiteLink    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// site configuration
model SiteConfiguration {
  id                         String    @id @default(uuid())
  name             String
  shortDescription String
  longDescription  String?
  copyRights       String
  logo             String
  logoPublicId     String?
  favicon          String
  faviconPublicId  String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

